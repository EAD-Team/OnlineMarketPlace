@page "/UpdateItem/{ProductId:int}"
@inject NavigationManager manager
@inject HttpClient Http
@inject ProductService service
<!--TODO look at these red lines/errors, code works correctly but somehow it shows errors.  -->
<h4 class="text-center mt-4">Please Change Following Details (if any):</h4>
<form action="/SellerItems" class="text-left" method="get" runat="server" EncType="multipart/form-data">
    <input type="hidden" asp-for="Type" value="Regular" />
    <table class="m-auto w-50">
        <tr>
            <td>
                <label class="col-form-label" for="Name">Product Name: </label>
            </td>
            <td>
                <input class="form-control" @bind-value="value.Name" name="Name" id="Name" />
            </td>
        </tr>
        <tr>
            <td>
                <label class="col-form-label" for="Price">Product Price: </label>
            </td>
            <td>
                <input class="form-control" type="number" @bind-value="value.Price" name="Price" id="Price" min="0"/>
            </td>
        </tr>
        <tr>
            <td>
                <label class="col-form-label" for="Discount">Product Discount: </label>
            </td>
            <td>
                <input class="form-control" @bind-value="value.Discount" type="number" name="Discount" id="Discount" min="0" max="100" />
            </td>
        </tr>
        <tr>
            <td>
                <label class="col-form-label" for="Quantity">Product Quantity: </label>
            </td>
            <td>
                <input class="form-control" type="number" @bind-value="value.Quantity" name="Quantity" id="Quantity" min="0" />
            </td>
        </tr>
        <tr>
            <td>
                <label class="col-form-label" for="Brand">Product Brand: </label>
            </td>
            <td>
                <input class="form-control" @bind-value="value.Brand" name="Brand" id="Brand" />
            </td>
        </tr>
        <tr>
            <td>
                <label class="col-form-label" for="Category">Product Category: </label>
            </td>
            <td>
                <select id="Category" name="Category" class="custom-select" form="addform" @bind-value="value.CategoryId" @bind-value:event="onchange">
                    <option>Select Category</option>
                    @foreach (Category cat in ItemsRepository.Categories)
                    {
                        <option value=@cat.Id>@cat.Name</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td colspan="2" class="text-center">
                <p class="validation-message">@ErrorMessage</p>
            </td>
        </tr>
        <tr>
            <td colspan="2" class="text-right">
                <input class="btn btn-purple" type="button" value="Apply Changes" @onclick="SubmitForm" />
            </td>
        </tr>
    </table>
</form>

@code {
    [Parameter]
    public int ProductId { get; set; }
    Product value;
    string ErrorMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        value = ItemsRepository.ItemsList.Find(prod => prod.Id == ProductId);
    }

    async Task SubmitForm()
    {
        if (value.Name == null || value.Name == "")
        {
            ErrorMessage = "Product Name Cannot Be Empty";
        }
        else if (value.Price == null)
        {
            ErrorMessage = "Product Price Cannot Be Empty";
        }
        else if (value.Price < 0)
        {
            ErrorMessage = "Product Price Must be greater than 0";
        }
        else if (value.Discount == null)
        {
            ErrorMessage = "Product Discount Cannot Be Empty";
        }
        else if (value.Discount < 0 || value.Discount > 100)
        {
            ErrorMessage = "Product Discount Must Be Between 0 to 100";
        }
        else if (value.Quantity == null)
        {
            ErrorMessage = "Product Quantity Cannot Be Empty";
        }
        else if (value.Quantity < 0)
        {
            ErrorMessage = "Product Quantity Must be greater than 0";
        }
        else if (value.Brand == null || value.Brand == "")
        {
            ErrorMessage = "Product Brand Cannot Be Empty";
        }
        else if (value.CategoryId == null)
        {
            ErrorMessage = "Product Category Cannot Be Empty";
        }
        else
        {
            await Http.PutAsJsonAsync($"https://localhost:44390/api/online/update/{value.Id}", value);
            ItemsRepository.ItemsList = await service.GetProductsListOfSeller(ItemsRepository.CurrentSellerId);
            manager.NavigateTo("/SellerItems");
        }
    }
}

@page "/AddItem"
@inject NavigationManager manager
@inject IJSRuntime JS
@inject HttpClient Http
@inject ProductService service
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView>
    <h4 class="text-center mt-4">Please Enter Product Details Below:</h4>
    <form class="text-left" id="addform">
        @if(value!=null)
        {
            <table class="m-auto w-50">
                <tr>
                    <td>
                        <label class="col-form-label" for="Name">Product Name: </label>
                    </td>
                    <td>
                        <input class="form-control" @bind-value="value.Name" name="Name" id="Name" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="col-form-label" for="Price">Product Price: </label>
                    </td>
                    <td>
                        <input class="form-control" @bind-value="value.Price" type="number" name="Price" id="Price" min="0" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="col-form-label" for="Discount">Product Discount: </label>
                    </td>
                    <td>
                        <input class="form-control" @bind-value="value.Discount" type="number" name="Discount" id="Discount" min="0" max="100" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="col-form-label" for="Quantity">Product Quantity: </label>
                    </td>
                    <td>
                        <input class="form-control" @bind-value="value.Quantity" type="number" name="Quantity" id="Quantity" min="0" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="col-form-label" for="Brand">Product Brand: </label>
                    </td>
                    <td>
                        <input class="form-control" @bind-value="value.Brand" name="Brand" id="Brand" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="col-form-label" for="Category">Product Category: </label>
                    </td>
                    <td>
                        <select id="Category" name="Category" class="custom-select" form="addform" @bind-value="value.CategoryId" @bind-value:event="onchange">
                            <option>Select Category</option>
                            @if (Categories != null)
                            {
                                @foreach (Category cat in ItemsRepository.Categories)
                                {
                                    <option value=@cat.Id>@cat.Name</option>
                                }
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" class="text-center">
                        <p class="validation-message">@ErrorMessage</p>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" class="text-right">
                        <input class="btn btn-success" id="submitBtn" type="button" value="Add Product" @onclick="SubmitForm" />
                    </td>
                </tr>
            </table>
        }
    </form>
</AuthorizeView>

@code {
    static Random rand = new Random();
    string ErrorMessage = "";
    private string sellerEmail;
    Product value = new Product { SellerId = CurrentSellerId, CreationDate = DateTime.Now, Picture = Pictures.ElementAt(rand.Next(0, Pictures.Count())) };

    protected override async Task OnParametersSetAsync()
    {
        await SetSellerEmail();
        if (CurrentSellerId == -1)
        {
            CurrentSellerId = await service.GetSellerId(sellerEmail);
        }
        if (Categories == null)
        {
            Categories = await service.GetCategoriesList();
        }
    }

    private async Task SetSellerEmail()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        try
        {
            sellerEmail = user.FindFirst(c => c.Type == "preferred_username")?.Value;
        }
        catch (Exception exp)
        {
            Console.WriteLine(exp.Message);
        }
    }

    async Task SubmitForm()
    {
        if (value.Name == null || value.Name == "")
        {
            ErrorMessage = "Product Name Cannot Be Empty";
        }
        else if (value.Price == null)
        {
            ErrorMessage = "Product Price Cannot Be Empty";
        }
        else if (value.Price < 0)
        {
            ErrorMessage = "Product Price Must be greater than 0";
        }
        else if (value.Discount == null)
        {
            ErrorMessage = "Product Discount Cannot Be Empty";
        }
        else if (value.Discount < 0 || value.Discount > 100)
        {
            ErrorMessage = "Product Discount Must Be Between 0 to 100";
        }
        else if (value.Quantity == null)
        {
            ErrorMessage = "Product Quantity Cannot Be Empty";
        }
        else if (value.Quantity < 0)
        {
            ErrorMessage = "Product Quantity Must be greater than 0";
        }
        else if (value.Brand == null || value.Brand == "")
        {
            ErrorMessage = "Product Brand Cannot Be Empty";
        }
        else if (value.CategoryId == null)
        {
            ErrorMessage = "Product Category Cannot Be Empty";
        }
        else
        {
            await Http.PostAsJsonAsync("https://localhost:44390/api/online/add", value);
            ItemsList = await service.GetProductsListOfSeller(CurrentSellerId);
            await JS.InvokeVoidAsync("gtagH");
            manager.NavigateTo("/SellerItems");
        }
    }
}
